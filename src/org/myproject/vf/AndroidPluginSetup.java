/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.myproject.vf;

import java.util.ArrayList;

/**
 *
 * @author stone
 */
public class AndroidPluginSetup extends javax.swing.JDialog {

    //variables for dialog to store user choice
    String volProfile;
    ArrayList plugins = new ArrayList();

    /**
     * Creates new form AndroidPluginSetup
     */
    /**
     * Creates new form AndroidPluginSetup
     */
    public AndroidPluginSetup(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public AndroidPluginSetup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pstree = new javax.swing.JCheckBox();
        pslist = new javax.swing.JCheckBox();
        limeInfo = new javax.swing.JCheckBox();
        arpTable = new javax.swing.JCheckBox();
        linuxBanner = new javax.swing.JCheckBox();
        bashHistory = new javax.swing.JCheckBox();
        bashEnvVar = new javax.swing.JCheckBox();
        bashHashTable = new javax.swing.JCheckBox();
        checkAfInfo = new javax.swing.JCheckBox();
        checkCredsStruct = new javax.swing.JCheckBox();
        checkEvt = new javax.swing.JCheckBox();
        checkModules = new javax.swing.JCheckBox();
        checkSyscall = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        checkSyscallArm = new javax.swing.JCheckBox();
        dentryCache = new javax.swing.JCheckBox();
        kernelDebugBuffer = new javax.swing.JCheckBox();
        findELF = new javax.swing.JCheckBox();
        ifconfigComm = new javax.swing.JCheckBox();
        enumerateFiles = new javax.swing.JCheckBox();
        hiddenKernelModules = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        iomemComm = new javax.swing.JCheckBox();
        keyboardNotifiers = new javax.swing.JCheckBox();
        ldrModules = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        libraryList = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        appsPromSoc = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        loadedKernelModules = new javax.swing.JCheckBox();
        listOpenFiles = new javax.swing.JCheckBox();
        suspiciousProcessMappings = new javax.swing.JCheckBox();
        mountedDevices = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        mountedDevicesKmemCache = new javax.swing.JCheckBox();
        netfilterHooks = new javax.swing.JCheckBox();
        netstat = new javax.swing.JCheckBox();
        pidHashTable = new javax.swing.JCheckBox();
        pltHook = new javax.swing.JCheckBox();
        processMaps = new javax.swing.JCheckBox();
        processMapsRedBlack = new javax.swing.JCheckBox();
        psauxComm = new javax.swing.JCheckBox();
        processEnvironment = new javax.swing.JCheckBox();
        processListPsxview = new javax.swing.JCheckBox();
        processListKmemCache = new javax.swing.JCheckBox();
        routingCache = new javax.swing.JCheckBox();
        slabinfoComm = new javax.swing.JCheckBox();
        listThreads = new javax.swing.JCheckBox();
        listVma = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        androidVolProfile = new javax.swing.JTextField();
        saveAndroidSettingsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.title")); // NOI18N
        setModal(true);
        setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel1.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(pstree, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.text")); // NOI18N
        pstree.setToolTipText(org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.toolTipText")); // NOI18N
        pstree.setName(""); // NOI18N
        pstree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pstreeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pslist, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.pslist.text")); // NOI18N
        pslist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pslistActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(limeInfo, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.limeInfo.text")); // NOI18N
        limeInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limeInfoActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(arpTable, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.arpTable.text")); // NOI18N
        arpTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arpTableActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(linuxBanner, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.linuxBanner.text")); // NOI18N
        linuxBanner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linuxBannerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bashHistory, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.bashHistory.text")); // NOI18N
        bashHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bashHistoryActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bashEnvVar, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.bashEnvVar.text")); // NOI18N
        bashEnvVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bashEnvVarActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bashHashTable, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.bashHashTable.text")); // NOI18N
        bashHashTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bashHashTableActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkAfInfo, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.checkAfInfo.text")); // NOI18N
        checkAfInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAfInfoActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkCredsStruct, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.checkCredsStruct.text")); // NOI18N
        checkCredsStruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCredsStructActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkEvt, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.checkEvt.text")); // NOI18N
        checkEvt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEvtActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkModules, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.checkModules.text")); // NOI18N
        checkModules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkModulesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkSyscall, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.checkSyscall.text")); // NOI18N
        checkSyscall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSyscallActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(checkSyscallArm, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.checkSyscallArm.text")); // NOI18N
        checkSyscallArm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSyscallArmActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dentryCache, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.dentryCache.text")); // NOI18N
        dentryCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dentryCacheActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(kernelDebugBuffer, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.kernelDebugBuffer.text")); // NOI18N
        kernelDebugBuffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kernelDebugBufferActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(findELF, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.findELF.text")); // NOI18N
        findELF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findELFActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ifconfigComm, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.ifconfigComm.text")); // NOI18N
        ifconfigComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifconfigCommActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(enumerateFiles, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.enumerateFiles.text")); // NOI18N
        enumerateFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enumerateFilesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(hiddenKernelModules, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.hiddenKernelModules.text")); // NOI18N
        hiddenKernelModules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hiddenKernelModulesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(iomemComm, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.iomemComm.text")); // NOI18N
        iomemComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iomemCommActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(keyboardNotifiers, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.keyboardNotifiers.text")); // NOI18N
        keyboardNotifiers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyboardNotifiersActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ldrModules, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.ldrModules.text")); // NOI18N
        ldrModules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ldrModulesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(libraryList, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.libraryList.text")); // NOI18N
        libraryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libraryListActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(appsPromSoc, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.appsPromSoc.text")); // NOI18N
        appsPromSoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appsPromSocActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(loadedKernelModules, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.loadedKernelModules.text")); // NOI18N
        loadedKernelModules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadedKernelModulesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(listOpenFiles, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.listOpenFiles.text")); // NOI18N
        listOpenFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listOpenFilesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(suspiciousProcessMappings, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.suspiciousProcessMappings.text")); // NOI18N
        suspiciousProcessMappings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspiciousProcessMappingsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mountedDevices, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.mountedDevices.text")); // NOI18N
        mountedDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mountedDevicesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mountedDevicesKmemCache, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.mountedDevicesKmemCache.text")); // NOI18N
        mountedDevicesKmemCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mountedDevicesKmemCacheActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(netfilterHooks, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.netfilterHooks.text")); // NOI18N
        netfilterHooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netfilterHooksActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(netstat, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.netstat.text")); // NOI18N
        netstat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netstatActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pidHashTable, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.pidHashTable.text")); // NOI18N
        pidHashTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pidHashTableActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(pltHook, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.pltHook.text")); // NOI18N
        pltHook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pltHookActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(processMaps, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.processMaps.text")); // NOI18N
        processMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processMapsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(processMapsRedBlack, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.processMapsRedBlack.text")); // NOI18N
        processMapsRedBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processMapsRedBlackActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(psauxComm, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.psauxComm.text")); // NOI18N
        psauxComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psauxCommActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(processEnvironment, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.processEnvironment.text")); // NOI18N
        processEnvironment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processEnvironmentActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(processListPsxview, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.processListPsxview.text")); // NOI18N
        processListPsxview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processListPsxviewActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(processListKmemCache, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.processListKmemCache.text")); // NOI18N
        processListKmemCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processListKmemCacheActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(routingCache, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.routingCache.text")); // NOI18N
        routingCache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routingCacheActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(slabinfoComm, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.slabinfoComm.text")); // NOI18N
        slabinfoComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slabinfoCommActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(listThreads, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.listThreads.text")); // NOI18N
        listThreads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listThreadsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(listVma, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.listVma.text")); // NOI18N
        listVma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listVmaActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setEnabled(false);
        jSeparator1.setName(""); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.jLabel13.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(psauxComm)
                    .addComponent(pstree)
                    .addComponent(pidHashTable)
                    .addComponent(processListPsxview)
                    .addComponent(listOpenFiles)
                    .addComponent(pslist)
                    .addComponent(processMaps)
                    .addComponent(processListKmemCache, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processMapsRedBlack)
                    .addComponent(loadedKernelModules)
                    .addComponent(enumerateFiles)
                    .addComponent(listThreads)
                    .addComponent(bashEnvVar)
                    .addComponent(bashHashTable)
                    .addComponent(hiddenKernelModules)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ldrModules)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(bashHistory)
                    .addComponent(suspiciousProcessMappings)
                    .addComponent(processEnvironment)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(libraryList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(checkAfInfo)
                    .addComponent(checkCredsStruct)
                    .addComponent(checkSyscallArm)
                    .addComponent(checkSyscall)
                    .addComponent(checkModules)
                    .addComponent(keyboardNotifiers)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkEvt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(linuxBanner)
                    .addComponent(findELF)
                    .addComponent(listVma)
                    .addComponent(dentryCache)
                    .addComponent(mountedDevicesKmemCache)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mountedDevices)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(slabinfoComm)
                    .addComponent(iomemComm)
                    .addComponent(kernelDebugBuffer)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pltHook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(arpTable)
                        .addComponent(jLabel12)
                        .addComponent(ifconfigComm)
                        .addComponent(routingCache)
                        .addComponent(netfilterHooks)
                        .addComponent(netstat)
                        .addComponent(limeInfo)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(appsPromSoc)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel6))
                        .addComponent(jSeparator4))
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pslist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processListKmemCache)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processListPsxview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psauxComm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pstree)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pidHashTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listOpenFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enumerateFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listThreads)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processEnvironment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(libraryList)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suspiciousProcessMappings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processMaps)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processMapsRedBlack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bashHashTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bashHistory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bashEnvVar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ldrModules)
                            .addComponent(jLabel4))
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hiddenKernelModules)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadedKernelModules, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kernelDebugBuffer)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(iomemComm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(slabinfoComm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mountedDevices)
                                .addComponent(jLabel7))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(mountedDevicesKmemCache)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dentryCache)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(listVma)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(linuxBanner)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(findELF)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(pltHook)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(arpTable)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ifconfigComm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(routingCache)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(netfilterHooks)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(netstat)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(limeInfo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(appsPromSoc)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(checkAfInfo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(checkCredsStruct)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(checkSyscallArm)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(checkSyscall)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(checkModules)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(keyboardNotifiers)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(checkEvt)
                                .addComponent(jLabel2)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        androidVolProfile.setText(org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.androidVolProfile.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(saveAndroidSettingsButton, org.openide.util.NbBundle.getMessage(AndroidPluginSetup.class, "AndroidPluginSetup.saveAndroidSettingsButton.text")); // NOI18N
        saveAndroidSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndroidSettingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(androidVolProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 2, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveAndroidSettingsButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(androidVolProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(saveAndroidSettingsButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveAndroidSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndroidSettingsButtonActionPerformed
        // TODO add your handling code here:

        //Set Volatility Profile
        volProfile = androidVolProfile.getText();

        AndroidPluginSetup.this.dispose();
    }//GEN-LAST:event_saveAndroidSettingsButtonActionPerformed

    private void listVmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listVmaActionPerformed
        // TODO add your handling code here:
        if (listVma.isSelected()) {

            plugins.add("linux_vma_cache");
        }
        else if(!listVma.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_vma_cache"));
        }
    }//GEN-LAST:event_listVmaActionPerformed

    private void listThreadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listThreadsActionPerformed
        // TODO add your handling code here:
        if (listThreads.isSelected()) {

            plugins.add("linux_threads");
        }
        else if(!listThreads.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_threads"));
        }
    }//GEN-LAST:event_listThreadsActionPerformed

    private void slabinfoCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slabinfoCommActionPerformed
        // TODO add your handling code here:
        if (slabinfoComm.isSelected()) {

            plugins.add("linux_slabinfo");
        }
        else if(!slabinfoComm.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_slabinfo"));
        }
    }//GEN-LAST:event_slabinfoCommActionPerformed

    private void routingCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routingCacheActionPerformed
        // TODO add your handling code here:
        if (routingCache.isSelected()) {

            plugins.add("linux_route_cache");
        }
        else if(!routingCache.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_route_cache"));
        }
    }//GEN-LAST:event_routingCacheActionPerformed

    private void processListKmemCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processListKmemCacheActionPerformed
        // TODO add your handling code here:
        if (processListKmemCache.isSelected()) {

            plugins.add("linux_pslist_cache");
        }
        else if(!processListKmemCache.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_pslist_cache"));
        }
    }//GEN-LAST:event_processListKmemCacheActionPerformed

    private void processListPsxviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processListPsxviewActionPerformed
        // TODO add your handling code here:
        if (processListPsxview.isSelected()) {

            plugins.add("linux_psxview");
        }
        else if(!processListPsxview.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_psxview"));
        }
    }//GEN-LAST:event_processListPsxviewActionPerformed

    private void processEnvironmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processEnvironmentActionPerformed
        // TODO add your handling code here:
        if (processEnvironment.isSelected()) {

            plugins.add("linux_psenv");
        }
        else if(!processEnvironment.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_psenv"));
        }
    }//GEN-LAST:event_processEnvironmentActionPerformed

    private void psauxCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psauxCommActionPerformed
        // TODO add your handling code here:
        if (psauxComm.isSelected()) {

            plugins.add("linux_psaux");
        }
        else if(!psauxComm.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_psaux"));
        }
    }//GEN-LAST:event_psauxCommActionPerformed

    private void processMapsRedBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processMapsRedBlackActionPerformed
        // TODO add your handling code here:
        if (processMapsRedBlack.isSelected()) {

            plugins.add("linux_proc_maps_rb");
        }
        else if(!processMapsRedBlack.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_proc_maps_rb"));
        }
    }//GEN-LAST:event_processMapsRedBlackActionPerformed

    private void processMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processMapsActionPerformed
        // TODO add your handling code here:
        if (processMaps.isSelected()) {

            plugins.add("linux_proc_maps");
        }
        else if(!processMaps.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_proc_maps"));
        }
    }//GEN-LAST:event_processMapsActionPerformed

    private void pltHookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pltHookActionPerformed
        // TODO add your handling code here:
        if (pltHook.isSelected()) {

            plugins.add("linux_plthook");
        }
        else if(!pltHook.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_plthook"));
        }
    }//GEN-LAST:event_pltHookActionPerformed

    private void pidHashTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pidHashTableActionPerformed
        // TODO add your handling code here:
        if (pidHashTable.isSelected()) {

            plugins.add("linux_pidhashtable");
        }
        else if(!pidHashTable.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_pidhashtable"));
        }
    }//GEN-LAST:event_pidHashTableActionPerformed

    private void netstatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netstatActionPerformed
        // TODO add your handling code here:
        if (netstat.isSelected()) {

            plugins.add("linux_netstat");
        }
        else if(!netstat.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_netstat"));
        }
    }//GEN-LAST:event_netstatActionPerformed

    private void netfilterHooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netfilterHooksActionPerformed
        // TODO add your handling code here:
        if (netfilterHooks.isSelected()) {

            plugins.add("linux_netfilter");
        }
        else if(!netfilterHooks.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_netfilter"));
        }
    }//GEN-LAST:event_netfilterHooksActionPerformed

    private void mountedDevicesKmemCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mountedDevicesKmemCacheActionPerformed
        // TODO add your handling code here:
        if (mountedDevices.isSelected()) {

            plugins.add("linux_mount_cache");
        }
        else if(!mountedDevices.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_mount_cache"));
        }
    }//GEN-LAST:event_mountedDevicesKmemCacheActionPerformed

    private void mountedDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mountedDevicesActionPerformed
        // TODO add your handling code here:
        if (mountedDevices.isSelected()) {

            plugins.add("linux_mount");
        }
        else if(!mountedDevices.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_mount"));
        }
    }//GEN-LAST:event_mountedDevicesActionPerformed

    private void suspiciousProcessMappingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspiciousProcessMappingsActionPerformed
        // TODO add your handling code here:
        if (suspiciousProcessMappings.isSelected()) {

            plugins.add("linux_malfind");
        }
        else if(!suspiciousProcessMappings.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_malfind"));
        }
    }//GEN-LAST:event_suspiciousProcessMappingsActionPerformed

    private void listOpenFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listOpenFilesActionPerformed
        // TODO add your handling code here:
        if (listOpenFiles.isSelected()) {

            plugins.add("linux_lsof");
        }
        else if(!listOpenFiles.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_lsof"));
        }
    }//GEN-LAST:event_listOpenFilesActionPerformed

    private void loadedKernelModulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadedKernelModulesActionPerformed
        // TODO add your handling code here:
        if (loadedKernelModules.isSelected()) {

            plugins.add("linux_lsmod");
        }
        else if(!loadedKernelModules.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_lsmod"));
        }
    }//GEN-LAST:event_loadedKernelModulesActionPerformed

    private void appsPromSocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appsPromSocActionPerformed
        // TODO add your handling code here:
        if (appsPromSoc.isSelected()) {

            plugins.add("linux_list_raw");
        }
        else if(!appsPromSoc.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_list_raw"));
        }
    }//GEN-LAST:event_appsPromSocActionPerformed

    private void libraryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libraryListActionPerformed
        // TODO add your handling code here:
        if (libraryList.isSelected()) {

            plugins.add("linux_library_list");
        }
        else if(!libraryList.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_library_list"));
        }
    }//GEN-LAST:event_libraryListActionPerformed

    private void ldrModulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ldrModulesActionPerformed
        // TODO add your handling code here:
        if (ldrModules.isSelected()) {

            plugins.add("linux_ldrmodules");
        }
        else if(!ldrModules.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_ldrmodules"));
        }
    }//GEN-LAST:event_ldrModulesActionPerformed

    private void keyboardNotifiersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyboardNotifiersActionPerformed
        // TODO add your handling code here:
        if (keyboardNotifiers.isSelected()) {

            plugins.add("linux_keyboard_notifiers");
        }
        else if(!keyboardNotifiers.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_keyboard_notifiers"));
        }
    }//GEN-LAST:event_keyboardNotifiersActionPerformed

    private void iomemCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iomemCommActionPerformed
        // TODO add your handling code here:
        if (iomemComm.isSelected()) {

            plugins.add("linux_iomem");
        }
        else if(!iomemComm.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_iomem"));
        }
    }//GEN-LAST:event_iomemCommActionPerformed

    private void hiddenKernelModulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hiddenKernelModulesActionPerformed
        // TODO add your handling code here:
        if (hiddenKernelModules.isSelected()) {

            plugins.add("linux_hidden_modules");
        }
        else if(!hiddenKernelModules.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_hidden_modules"));
        }
    }//GEN-LAST:event_hiddenKernelModulesActionPerformed

    private void enumerateFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enumerateFilesActionPerformed
        // TODO add your handling code here:
        if (enumerateFiles.isSelected()) {

            plugins.add("linux_enumerate_files");
        }
        else if(!enumerateFiles.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_enumerate_files"));
        }
    }//GEN-LAST:event_enumerateFilesActionPerformed

    private void ifconfigCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifconfigCommActionPerformed
        // TODO add your handling code here:
        if (ifconfigComm.isSelected()) {

            plugins.add("linux_ifconfig");
        }
        else if(!ifconfigComm.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_ifconfig"));
        }
    }//GEN-LAST:event_ifconfigCommActionPerformed

    private void findELFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findELFActionPerformed
        // TODO add your handling code here:
        if (findELF.isSelected()) {

            plugins.add("linux_elfs");
        }
        else if(!findELF.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_elfs"));
        }
    }//GEN-LAST:event_findELFActionPerformed

    private void kernelDebugBufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kernelDebugBufferActionPerformed
        // TODO add your handling code here:
        if (kernelDebugBuffer.isSelected()) {

            plugins.add("linux_dmesg");
        }
        else if(!kernelDebugBuffer.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_dmesg"));
        }
    }//GEN-LAST:event_kernelDebugBufferActionPerformed

    private void dentryCacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dentryCacheActionPerformed
        // TODO add your handling code here:
        if (dentryCache.isSelected()) {

            plugins.add("linux_dentry_cache");
        }
        else if(!dentryCache.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_dentry_cache"));
        }
    }//GEN-LAST:event_dentryCacheActionPerformed

    private void checkSyscallArmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSyscallArmActionPerformed
        // TODO add your handling code here:
        if (checkSyscallArm.isSelected()) {

            plugins.add("linux_check_syscall_arm");
        }
        else if(!checkSyscallArm.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_check_syscall_arm"));
        }
    }//GEN-LAST:event_checkSyscallArmActionPerformed

    private void checkSyscallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSyscallActionPerformed
        // TODO add your handling code here:
        if (checkSyscall.isSelected()) {

            plugins.add("linux_check_syscall");
        }
        else if(!checkSyscall.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_check_syscall"));
        }
    }//GEN-LAST:event_checkSyscallActionPerformed

    private void checkModulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkModulesActionPerformed
        // TODO add your handling code here:
        if (checkModules.isSelected()) {

            plugins.add("linux_check_modules");
        }
        else if(!checkModules.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_check_modules"));
        }
    }//GEN-LAST:event_checkModulesActionPerformed

    private void checkEvtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEvtActionPerformed
        // TODO add your handling code here:
        if (checkEvt.isSelected()) {

            plugins.add("linux_check_evt_arm");
        }
        else if(!checkEvt.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_check_evt_arm"));
        }
    }//GEN-LAST:event_checkEvtActionPerformed

    private void checkCredsStructActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCredsStructActionPerformed
        // TODO add your handling code here:
        //line to add plugin to ArrayList if box selected
        if (checkCredsStruct.isSelected()) {

            plugins.add("linux_check_creds");
        }
        else if(!checkCredsStruct.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_check_creds"));
        }
    }//GEN-LAST:event_checkCredsStructActionPerformed

    private void checkAfInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAfInfoActionPerformed
        // TODO add your handling code here:
        //line to add plugin to ArrayList if box selected
        if (checkAfInfo.isSelected()) {

            plugins.add("linux_check_afinfo");
        }
        else if(!checkAfInfo.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_check_afinfo"));
        }
    }//GEN-LAST:event_checkAfInfoActionPerformed

    private void bashHashTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bashHashTableActionPerformed
        // TODO add your handling code here:
        if (bashHashTable.isSelected()) {

            plugins.add("linux_bash_hash");
        }
        else if(!bashHashTable.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("linux_bash_hash"));
        }
    }//GEN-LAST:event_bashHashTableActionPerformed

    private void bashEnvVarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bashEnvVarActionPerformed
        // TODO add your handling code here:
        if (bashEnvVar.isSelected()) {

            plugins.add("linux_bash_env");
        }
        else if(!bashEnvVar.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("linux_bash_env"));
        }
    }//GEN-LAST:event_bashEnvVarActionPerformed

    private void bashHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bashHistoryActionPerformed
        // TODO add your handling code here:
        if (bashHistory.isSelected()) {

            plugins.add("linux_bash");
        }
        else if(!bashHistory.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("linux_bash"));
        }
    }//GEN-LAST:event_bashHistoryActionPerformed

    private void linuxBannerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linuxBannerActionPerformed
        // TODO add your handling code here:
        if (linuxBanner.isSelected()) {

            plugins.add("linux_banner");
        }
        else if(!linuxBanner.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("linux_banner"));
        }
    }//GEN-LAST:event_linuxBannerActionPerformed

    private void arpTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arpTableActionPerformed
        // TODO add your handling code here:
        if (arpTable.isSelected()) {

            plugins.add("linux_arp");
        }
        else if(!arpTable.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("linux_arp"));
        }
    }//GEN-LAST:event_arpTableActionPerformed

    private void limeInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limeInfoActionPerformed
        // TODO add your handling code here:
        if (limeInfo.isSelected()) {

            plugins.add("limeinfo");
        }
        else if(!limeInfo.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("limeinfo"));
        }
    }//GEN-LAST:event_limeInfoActionPerformed

    private void pslistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pslistActionPerformed
        // TODO add your handling code here:
        if (pslist.isSelected()) {
            //line to add plugin to ArrayList if box selected
            plugins.add("linux_pslist");
        }
        else if(!pslist.isSelected()){
            //line to remove plugin to ArrayList if box selected
            plugins.remove(plugins.indexOf("linux_pslist"));
        }

    }//GEN-LAST:event_pslistActionPerformed

    //Set Volatility Plugins list
    private void pstreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pstreeActionPerformed
        // TODO add your handling code here:
        //line to add plugin to ArrayList if box selected
        if (pstree.isSelected()) {

            plugins.add("linux_pstree");

        }
        else if(!pstree.isSelected()){
            //line to remove plugin from ArrayList if box not selected
            plugins.remove(plugins.indexOf("linux_pstree"));

        }
    }//GEN-LAST:event_pstreeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AndroidPluginSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AndroidPluginSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AndroidPluginSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AndroidPluginSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AndroidPluginSetup dialog = new AndroidPluginSetup(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField androidVolProfile;
    private javax.swing.JCheckBox appsPromSoc;
    private javax.swing.JCheckBox arpTable;
    private javax.swing.JCheckBox bashEnvVar;
    private javax.swing.JCheckBox bashHashTable;
    private javax.swing.JCheckBox bashHistory;
    private javax.swing.JCheckBox checkAfInfo;
    private javax.swing.JCheckBox checkCredsStruct;
    private javax.swing.JCheckBox checkEvt;
    private javax.swing.JCheckBox checkModules;
    private javax.swing.JCheckBox checkSyscall;
    private javax.swing.JCheckBox checkSyscallArm;
    private javax.swing.JCheckBox dentryCache;
    private javax.swing.JCheckBox enumerateFiles;
    private javax.swing.JCheckBox findELF;
    private javax.swing.JCheckBox hiddenKernelModules;
    private javax.swing.JCheckBox ifconfigComm;
    private javax.swing.JCheckBox iomemComm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JCheckBox kernelDebugBuffer;
    private javax.swing.JCheckBox keyboardNotifiers;
    private javax.swing.JCheckBox ldrModules;
    private javax.swing.JCheckBox libraryList;
    private javax.swing.JCheckBox limeInfo;
    private javax.swing.JCheckBox linuxBanner;
    private javax.swing.JCheckBox listOpenFiles;
    private javax.swing.JCheckBox listThreads;
    private javax.swing.JCheckBox listVma;
    private javax.swing.JCheckBox loadedKernelModules;
    private javax.swing.JCheckBox mountedDevices;
    private javax.swing.JCheckBox mountedDevicesKmemCache;
    private javax.swing.JCheckBox netfilterHooks;
    private javax.swing.JCheckBox netstat;
    private javax.swing.JCheckBox pidHashTable;
    private javax.swing.JCheckBox pltHook;
    private javax.swing.JCheckBox processEnvironment;
    private javax.swing.JCheckBox processListKmemCache;
    private javax.swing.JCheckBox processListPsxview;
    private javax.swing.JCheckBox processMaps;
    private javax.swing.JCheckBox processMapsRedBlack;
    private javax.swing.JCheckBox psauxComm;
    private javax.swing.JCheckBox pslist;
    private javax.swing.JCheckBox pstree;
    private javax.swing.JCheckBox routingCache;
    private javax.swing.JButton saveAndroidSettingsButton;
    private javax.swing.JCheckBox slabinfoComm;
    private javax.swing.JCheckBox suspiciousProcessMappings;
    // End of variables declaration//GEN-END:variables
}
